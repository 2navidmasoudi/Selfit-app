apply plugin: "com.android.application"

import com.android.build.OutputFile


project.ext.react = [
  entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false

android {
  compileSdkVersion 28
  buildToolsVersion '28.0.3'

  defaultConfig {
    applicationId "com.selfit.universal"
    minSdkVersion 16
    targetSdkVersion 28
    versionCode 10
    versionName "2.0.0"
    ndk {
      abiFilters "armeabi-v7a", "x86"
    }
  }
  signingConfigs {
    release {
      if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
        storeFile file(MYAPP_RELEASE_STORE_FILE)
        storePassword MYAPP_RELEASE_STORE_PASSWORD
        keyAlias MYAPP_RELEASE_KEY_ALIAS
        keyPassword MYAPP_RELEASE_KEY_PASSWORD
      }
    }
  }
  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false  // If true, also generate a universal APK
      include "armeabi-v7a", "x86"
    }
  }
  buildTypes {
    release {
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      signingConfig signingConfigs.release
    }
  }
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
      def versionCodes = ["armeabi-v7a": 1, "x86": 2]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {  // null for the universal-debug, universal-release variants
        output.versionCodeOverride =
          versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
      }
    }
  }
}

dependencies {
  implementation fileTree(dir: "libs", include: ["*.jar"])
  implementation "com.android.support:appcompat-v7:28.0.0"
  implementation "com.facebook.react:react-native:0.52.2"
  implementation "me.leolin:ShortcutBadger:1.1.21@aar"
  implementation project(':react-native-maps')
  implementation project(':react-native-svg')
  implementation project(':react-native-device-info')
  implementation project(':react-native-video')
  implementation project(':react-native-fs')
  implementation project(':react-native-linear-gradient')
  implementation project(':react-native-image-picker')
  implementation project(':react-native-fetch-blob')
}

task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}
project.afterEvaluate {
  apply from: '../../node_modules/react-native-zss-rich-text-editor/htmlCopy.gradle';
  copyEditorHtmlToAppAssets(file('../../node_modules/react-native-zss-rich-text-editor'))
}